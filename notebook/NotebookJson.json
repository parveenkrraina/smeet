{
	"name": "NotebookJson",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkaic4ypz",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a8f2c410-812b-4a3a-9497-5dac5f8f412b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a2cc91cf-591e-48fd-90b3-3328027b936e/resourceGroups/dp203-aic4ypz/providers/Microsoft.Synapse/workspaces/synapseaic4ypz/bigDataPools/sparkaic4ypz",
				"name": "sparkaic4ypz",
				"type": "Spark",
				"endpoint": "https://synapseaic4ypz.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkaic4ypz",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"json_df = spark.read.load('abfss://files@datalakeaic4ypz.dfs.core.windows.net/sales_data_2021_Q1_February.json', format='json')\r\n",
					"json_df.write.mode(\"overwrite\").saveAsTable(\"default.YourTableName\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display schema and first few rows\r\n",
					"json_df.printSchema()\r\n",
					"json_df.show(5)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, sum\r\n",
					"\r\n",
					"# Count null values for each column\r\n",
					"null_counts = json_df.select([sum(col(c).isNull().cast(\"int\")).alias(c) for c in json_df.columns])\r\n",
					"null_counts.show()\r\n",
					""
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count total rows\r\n",
					"total_rows = json_df.count()\r\n",
					"\r\n",
					"# Count rows after dropping duplicates\r\n",
					"distinct_rows = json_df.dropDuplicates().count()\r\n",
					"\r\n",
					"# Calculate number of duplicate rows\r\n",
					"duplicates_count = total_rows - distinct_rows\r\n",
					"print(f\"Number of duplicate rows: {duplicates_count}\")\r\n",
					""
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Drop rows with any null values\r\n",
					"json_df_cleaned = json_df.dropna()\r\n",
					"\r\n",
					"# Remove duplicate rows\r\n",
					"json_df_cleaned = json_df_cleaned.dropDuplicates()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count null values for each column\r\n",
					"null_counts = json_df_cleaned.select([sum(col(c).isNull().cast(\"int\")).alias(c) for c in json_df_cleaned.columns])\r\n",
					"null_counts.show()\r\n",
					"# Count total rows\r\n",
					"total_rows = json_df_cleaned.count()\r\n",
					"\r\n",
					"# Count rows after dropping duplicates\r\n",
					"distinct_rows = json_df_cleaned.dropDuplicates().count()\r\n",
					"\r\n",
					"# Calculate number of duplicate rows\r\n",
					"duplicates_count = total_rows - distinct_rows\r\n",
					"print(f\"Number of duplicate rows: {duplicates_count}\")\r\n",
					""
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.functions import to_date\r\n",
					"\r\n",
					"# Cast data typeof quantity\r\n",
					"json_df_transformed = json_df_cleaned.withColumn(\"quantity\", col(\"quantity\").cast(\"int\"))\r\n",
					"# Convert sale_date from string to date\r\n",
					"json_df_transformed = json_df_transformed.withColumn(\"sale_date\", to_date(col(\"sale_date\"), \"yyyy-MM-dd\"))\r\n",
					"\r\n",
					"# Verify transformation\r\n",
					"json_df_transformed.printSchema()"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import sum\r\n",
					"\r\n",
					"# Aggregate to find total sales amount by region\r\n",
					"json_sales_by_region = json_df_transformed.groupBy(\"region\").agg(sum(\"total_amount\").alias(\"total_sales_amount\"))\r\n",
					"\r\n",
					"# Aggregate to find total quantity sold by product\r\n",
					"json_quantity_by_product = json_df_transformed.groupBy(\"product_id\", \"product_name\").agg(sum(\"quantity\").alias(\"total_quantity_sold\"))\r\n",
					"display(json_sales_by_region.limit(5))\r\n",
					"display(json_quantity_by_product.limit(5))"
				],
				"execution_count": 59
			}
		]
	}
}